import tkinter as tk
from tkinter import font as tkfont

class Calculator(tk.Tk):
    def __init__(self):
        super().__init__()
        
        self.title("Calculator")
        self.geometry("320x480")
        self.resizable(False, False)
        
        self.default_font = tkfont.Font(family="Segoe UI", size=12)
        self.display_font = tkfont.Font(family="Segoe UI", size=24)
        self.button_font = tkfont.Font(family="Segoe UI", size=14)
        
        self.current_input = ""
        self.total = 0
        self.operation = None
        self.reset_input = False
        
        self.create_ui()
    
    def create_ui(self):
        self.display_var = tk.StringVar()
        self.display_var.set("0")
        
        display_frame = tk.Frame(self, bg="#F2F2F2")
        display_frame.pack(fill=tk.X, padx=10, pady=(20, 10))
        
        display = tk.Label(
            display_frame,
            textvariable=self.display_var,
            font=self.display_font,
            bg="#F2F2F2",
            fg="#000000",
            anchor="e",
            padx=10
        )
        display.pack(fill=tk.X)
        
        buttons_frame = tk.Frame(self)
        buttons_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        buttons = [
            ["%", "CE", "C", "⌫"],
            ["1/x", "x²", "√x", "÷"],
            ["7", "8", "9", "×"],
            ["4", "5", "6", "-"],
            ["1", "2", "3", "+"],
            ["±", "0", ".", "="]
        ]
        
        for i, row in enumerate(buttons):
            buttons_frame.rowconfigure(i, weight=1)
            for j, btn_text in enumerate(row):
                buttons_frame.columnconfigure(j, weight=1)
                
                btn = tk.Button(
                    buttons_frame,
                    text=btn_text,
                    font=self.button_font,
                    command=lambda t=btn_text: self.on_button_click(t),
                    relief=tk.FLAT,
                    bg=self.get_button_color(btn_text),
                    fg=self.get_button_text_color(btn_text),
                    activebackground=self.get_button_active_color(btn_text)
                )
                btn.grid(row=i, column=j, sticky="nsew", padx=2, pady=2)
    
    def get_button_color(self, text):
        if text in ["CE", "C", "⌫"]:
            return "#E6E6E6"
        elif text in ["÷", "×", "-", "+", "="]:
            return "#FF9500"
        elif text in ["%", "1/x", "x²", "√x", "±"]:
            return "#D4D4D2"
        else:
            return "#F8F8F8"
    
    def get_button_text_color(self, text):
        if text in ["÷", "×", "-", "+", "="]:
            return "#FFFFFF"
        else:
            return "#000000"
    
    def get_button_active_color(self, text):
        if text in ["CE", "C", "⌫"]:
            return "#D4D4D2"
        elif text in ["÷", "×", "-", "+", "="]:
            return "#FFB84D"
        elif text in ["%", "1/x", "x²", "√x", "±"]:
            return "#C4C4C2"
        else:
            return "#E8E8E8"
    
    def on_button_click(self, text):
        if text.isdigit() or text == ".":
            self.handle_digit(text)
        elif text in ["+", "-", "×", "÷"]:
            self.handle_operation(text)
        elif text == "=":
            self.handle_equals()
        elif text == "C":
            self.handle_clear()
        elif text == "CE":
            self.handle_clear_entry()
        elif text == "⌫":
            self.handle_backspace()
        elif text == "±":
            self.handle_negate()
        elif text == "%":
            self.handle_percentage()
        elif text in ["1/x", "x²", "√x"]:
            self.handle_special_operations(text)
    
    def handle_digit(self, digit):
        if self.reset_input:
            self.current_input = ""
            self.reset_input = False
        
        if digit == ".":
            if "." not in self.current_input:
                self.current_input += digit
        else:
            if self.current_input == "0":
                self.current_input = digit
            else:
                self.current_input += digit
        
        self.update_display()
    
    def handle_operation(self, op):
        if self.current_input:
            self.calculate()
            self.operation = op
            self.reset_input = True
    
    def handle_equals(self):
        if self.operation and not self.reset_input:
            self.calculate()
            self.operation = None
    
    def handle_clear(self):
        self.current_input = ""
        self.total = 0
        self.operation = None
        self.reset_input = False
        self.display_var.set("0")
    
    def handle_clear_entry(self):
        self.current_input = ""
        self.display_var.set("0")
    
    def handle_backspace(self):
        if self.current_input:
            self.current_input = self.current_input[:-1]
            if not self.current_input:
                self.current_input = "0"
            self.update_display()
    
    def handle_negate(self):
        if self.current_input:
            if self.current_input[0] == "-":
                self.current_input = self.current_input[1:]
            else:
                self.current_input = "-" + self.current_input
            self.update_display()
    
    def handle_percentage(self):
        if self.current_input:
            value = float(self.current_input) / 100
            self.current_input = str(value)
            if "." in self.current_input and self.current_input.endswith("0"):
                self.current_input = self.current_input[:-2]
            self.update_display()
    
    def handle_special_operations(self, op):
        if self.current_input:
            value = float(self.current_input)
            if op == "1/x":
                result = 1 / value
            elif op == "x²":
                result = value ** 2
            elif op == "√x":
                result = value ** 0.5
            
            self.current_input = str(result)
            if "." in self.current_input and self.current_input.endswith("0"):
                self.current_input = self.current_input[:-2]
            self.update_display()
    
    def calculate(self):
        if not self.current_input:
            return
        
        current_value = float(self.current_input)
        
        if self.operation:
            if self.operation == "+":
                self.total += current_value
            elif self.operation == "-":
                self.total -= current_value
            elif self.operation == "×":
                self.total *= current_value
            elif self.operation == "÷":
                self.total /= current_value
        else:
            self.total = current_value
        
        self.current_input = str(self.total)
        if "." in self.current_input and self.current_input.endswith("0"):
            self.current_input = self.current_input[:-2]
        self.update_display()
        self.reset_input = True
    
    def update_display(self):
        if not self.current_input:
            self.display_var.set("0")
        else:
            self.display_var.set(self.current_input)

if __name__ == "__main__":
    app = Calculator()
    app.mainloop()
